// Code your design here
// here sync means both read and write uses same clk only .


module sync_fifo  (clk ,rst, wr_en, rd_en, data_in,data_out ,full,empty, rd_vd );
	input clk ,rst, wr_en, rd_en ;
	input [ (data_width-1):0] data_in ;
	output full, empty ;
	output reg [(data_width-1):0] data_out  ;
	output reg rd_vd ;  // read valid signal
	
			
		
  parameter   data_width=8;
  parameter fifo_depth=8 ;
  parameter addr_width=3 ;
    
             
  reg [(addr_width-1):0] wr_ptr, rd_ptr ;
  reg [(data_width-1): 0 ] mem [(fifo_depth-1) : 0] ;
  int i ;
  
  // always block for write 
  
  always @ (posedge clk or posedge rst) begin  
  
  if (rst) begin 
    wr_ptr <=  0;
	for (i=0; i< fifo_depth ; i=i+1 )
	  mem [i] <= 0 ;						// when reset then in mem all values are assigned with 0;
	  end 
	  
	  else if ((!full ) && wr_en ) begin 		//if not full then write the data into mem address
			mem [wr_ptr[(addr_width-1):0 ] ] <= data_in ;
			wr_ptr= wr_ptr+1 ;		
			end 
  end 
			
			//now erite always block for reading data from memory_address
		
  always @ (posedge clk or posedge rst)  begin // for reading data from memory address pointed out by rd_ptr .
		 if (rst) begin 
		   rd_ptr <= 0 ;
		   rd_vd <= 0;
		   data_out <= 0 ; 
		   end 
		   else if ( (!empty ) && rd_en ) begin 
		    data_out <= mem [rd_ptr [(addr_width-1):0 ]] ;
			  rd_ptr <= rd_ptr +1 ;
		      rd_vd <= 1 ;
			  end 
		
		else  begin
         rd_vd <=0 ;
		 data_out <= 0;
		 
      end	
  end 
      assign empty = ((wr_ptr - rd_ptr) ==0 )? 1'b1 : 1'b0  ;
	  assign full = ((wr_ptr - rd_ptr) == fifo_depth) ? 1'b1 : 1'b0 ;
	  
			  
		   endmodule
